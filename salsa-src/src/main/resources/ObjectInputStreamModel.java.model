package salsa.model;

import sun.misc.ObjectInputFilter;

import java.lang.reflect.Array;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.util.Objects;

import static com.ibm.wala.shrikeBT.IInvokeInstruction.Dispatch.VIRTUAL;


public class ObjectInputStream extends InputStream implements ObjectInput, ObjectStreamConstants {
    /**
     * an index to model the current read byte
     */
    private final int i;
    /**
     * filter stream for handling block data conversion
     */
    private final Object[] bin;


    /**
     * validation callback list
     */
    private final ValidationList vlist;



    /**
     * Creates an ObjectInputStream that reads from the specified InputStream.
     * A serialization stream header is read from the stream and verified.
     * This constructor will block until the corresponding ObjectOutputStream
     * has written and flushed the header.
     *
     * <p>If a security manager is installed, this constructor will check for
     * the "enableSubclassImplementation" SerializablePermission when invoked
     * directly or indirectly by the constructor of a subclass which overrides
     * the ObjectInputStream.readFields or ObjectInputStream.readUnshared
     * methods.
     *
     * @param in input stream to read from
     * @throws StreamCorruptedException if the stream header is incorrect
     * @throws IOException              if an I/O error occurs while reading stream header
     * @throws SecurityException        if untrusted subclass illegally overrides
     *                                  security-sensitive methods
     * @throws NullPointerException     if <code>in</code> is <code>null</code>
     * @see ObjectInputStream#ObjectInputStream()
     * @see ObjectInputStream#readFields()
     * @see ObjectOutputStream#ObjectOutputStream(OutputStream)
     */
    public ObjectInputStream(InputStream in) throws IOException {
        this.bin = new Object[Integer.MAX_VALUE];
        this.vlist = new ValidationList();
        this.i = 0;
    }


   public final Object readObject() throws IOException, ClassNotFoundException {

        Object obj = bin[i++];
        boolean hasData = hasData[i];
        if(hasData){
            if ($hasReadObjectMethod($obj)) {
                $allocation = $addAllocation($class);
                $add($returnValues, $allocation.def);
                $addInvocation([$allocation,$THIS], $READ_OBJECT_CB);
            }
        }else{
            if ($hasReadObjectNoDataMethod($obj)) {
                $allocation = $addAllocation($class);
                $add($returnValues, $allocation.def);
                $addInvocation([$allocation,$THIS], $READ_OBJECT_NO_DATA_CB);
            }
        }


        if ($hasReadResolveMethod($obj)) {
           $allocation = $addAllocation($class);
           $add($returnValues, $allocation.def);
           $addInvocation([$allocation,$THIS], $READ_RESOLVE_CB);
        }



       this.vlist.doCallbacks();

    }


    /**
     * Reads an "unshared" object from the ObjectInputStream.  This method is
     * identical to readObject, except that it prevents subsequent calls to
     * readObject and readUnshared from returning additional references to the
     * deserialized instance obtained via this call.  Specifically:
     * <ul>
     *   <li>If readUnshared is called to deserialize a back-reference (the
     *       stream representation of an object which has been written
     *       previously to the stream), an ObjectStreamException will be
     *       thrown.
     *
     *   <li>If readUnshared returns successfully, then any subsequent attempts
     *       to deserialize back-references to the stream handle deserialized
     *       by readUnshared will cause an ObjectStreamException to be thrown.
     * </ul>
     * Deserializing an object via readUnshared invalidates the stream handle
     * associated with the returned object.  Note that this in itself does not
     * always guarantee that the reference returned by readUnshared is unique;
     * the deserialized object may define a readResolve method which returns an
     * object visible to other parties, or readUnshared may return a Class
     * object or enum constant obtainable elsewhere in the stream or through
     * external means. If the deserialized object defines a readResolve method
     * and the invocation of that method returns an array, then readUnshared
     * returns a shallow clone of that array; this guarantees that the returned
     * array object is unique and cannot be obtained a second time from an
     * invocation of readObject or readUnshared on the ObjectInputStream,
     * even if the underlying data stream has been manipulated.
     *
     * <p>ObjectInputStream subclasses which override this method can only be
     * constructed in security contexts possessing the
     * "enableSubclassImplementation" SerializablePermission; any attempt to
     * instantiate such a subclass without this permission will cause a
     * SecurityException to be thrown.
     *
     * @return reference to deserialized object
     * @throws ClassNotFoundException   if class of an object to deserialize
     *                                  cannot be found
     * @throws StreamCorruptedException if control information in the stream
     *                                  is inconsistent
     * @throws ObjectStreamException    if object to deserialize has already
     *                                  appeared in stream
     * @throws OptionalDataException    if primitive data is next in stream
     * @throws IOException              if an I/O error occurs during deserialization
     * @since 1.4
     */
    public Object readUnshared() throws IOException, ClassNotFoundException {
        // if nested read, passHandle contains handle of enclosing object
        int outerHandle = passHandle;
        try {
            Object obj = readObject0(true);
            handles.markDependency(outerHandle, passHandle);
            ClassNotFoundException ex = handles.lookupException(passHandle);
            if (ex != null) {
                throw ex;
            }
            if (depth == 0) {
                vlist.doCallbacks();
            }
            return obj;
        } finally {
            passHandle = outerHandle;
            if (closed && depth == 0) {
                clear();
            }
        }
    }

    /**
     * Read the non-static and non-transient fields of the current class from
     * this stream.  This may only be called from the readObject method of the
     * class being deserialized. It will throw the NotActiveException if it is
     * called otherwise.
     *
     * @throws ClassNotFoundException if the class of a serialized object
     *                                could not be found.
     * @throws IOException            if an I/O error occurs.
     * @throws NotActiveException     if the stream is not currently reading
     *                                objects.
     */
    public void defaultReadObject() throws IOException, ClassNotFoundException {


    }

    /**
     * Reads the persistent fields from the stream and makes them available by
     * name.
     *
     * @return the <code>GetField</code> object representing the persistent
     * fields of the object being deserialized
     * @throws ClassNotFoundException if the class of a serialized object
     *                                could not be found.
     * @throws IOException            if an I/O error occurs.
     * @throws NotActiveException     if the stream is not currently reading
     *                                objects.
     * @since 1.2
     */
    public ObjectInputStream.GetField readFields() throws IOException, ClassNotFoundException {
        SerialCallbackContext ctx = curContext;
        if (ctx == null) {
            throw new NotActiveException("not in call to readObject");
        }
        Object curObj = ctx.getObj();
        ObjectStreamClass curDesc = ctx.getDesc();
        bin.setBlockDataMode(false);
        GetFieldImpl getField = new GetFieldImpl(curDesc);
        getField.readFields();
        bin.setBlockDataMode(true);
        if (!curDesc.hasWriteObjectData()) {
            /*
             * Fix for 4360508: since stream does not contain terminating
             * TC_ENDBLOCKDATA tag, set flag so that reading code elsewhere
             * knows to simulate end-of-custom-data behavior.
             */
            defaultDataEnd = true;
        }

        return getField;
    }

    /**
     * Register an object to be validated before the graph is returned.  While
     * similar to resolveObject these validations are called after the entire
     * graph has been reconstituted.  Typically, a readObject method will
     * register the object with the stream so that when all of the objects are
     * restored a final set of validations can be performed.
     *
     * @param obj  the object to receive the validation callback.
     * @param prio controls the order of callbacks;zero is a good default.
     *             Use higher numbers to be called back earlier, lower numbers for
     *             later callbacks. Within a priority, callbacks are processed in
     *             no particular order.
     * @throws NotActiveException     The stream is not currently reading objects
     *                                so it is invalid to register a callback.
     * @throws InvalidObjectException The validation object is null.
     */
    public void registerValidation(ObjectInputValidation obj, int prio) throws NotActiveException, InvalidObjectException {
        vlist.register(obj, prio);
    }





    /**
     * Reads a byte of data. This method will block if no input is available.
     *
     * @return the byte read, or -1 if the end of the stream is reached.
     * @throws IOException If an I/O error has occurred.
     */
    public int read() throws IOException {
        return bin.read();
    }

    /**
     * Reads into an array of bytes.  This method will block until some input
     * is available. Consider using java.io.DataInputStream.readFully to read
     * exactly 'length' bytes.
     *
     * @param buf the buffer into which the data is read
     * @param off the start offset of the data
     * @param len the maximum number of bytes read
     * @return the actual number of bytes read, -1 is returned when the end of
     * the stream is reached.
     * @throws IOException If an I/O error has occurred.
     * @see java.io.DataInputStream#readFully(byte[], int, int)
     */
    public int read(byte[] buf, int off, int len) throws IOException {
        if (buf == null) {
            throw new NullPointerException();
        }
        int endoff = off + len;
        if (off < 0 || len < 0 || endoff > buf.length || endoff < 0) {
            throw new IndexOutOfBoundsException();
        }
        return bin.read(buf, off, len, false);
    }

    /**
     * Returns the number of bytes that can be read without blocking.
     *
     * @return the number of available bytes.
     * @throws IOException if there are I/O errors while reading from the
     *                     underlying <code>InputStream</code>
     */
    public int available() throws IOException {
        return bin.available();
    }

    /**
     * Closes the input stream. Must be called to release any resources
     * associated with the stream.
     *
     * @throws IOException If an I/O error has occurred.
     */
    public void close() throws IOException {
        /*
         * Even if stream already closed, propagate redundant close to
         * underlying stream to stay consistent with previous implementations.
         */
        closed = true;
        if (depth == 0) {
            clear();
        }
        bin.close();
    }

    /**
     * Reads in a boolean.
     *
     * @return the boolean read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public boolean readBoolean() throws IOException {
        return bin.readBoolean();
    }

    /**
     * Reads an 8 bit byte.
     *
     * @return the 8 bit byte read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public byte readByte() throws IOException {
        return bin.readByte();
    }

    /**
     * Reads an unsigned 8 bit byte.
     *
     * @return the 8 bit byte read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public int readUnsignedByte() throws IOException {
        return bin.readUnsignedByte();
    }

    /**
     * Reads a 16 bit char.
     *
     * @return the 16 bit char read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public char readChar() throws IOException {
        return bin.readChar();
    }

    /**
     * Reads a 16 bit short.
     *
     * @return the 16 bit short read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public short readShort() throws IOException {
        return bin.readShort();
    }

    /**
     * Reads an unsigned 16 bit short.
     *
     * @return the 16 bit short read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public int readUnsignedShort() throws IOException {
        return bin.readUnsignedShort();
    }

    /**
     * Reads a 32 bit int.
     *
     * @return the 32 bit integer read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public int readInt() throws IOException {
        return bin.readInt();
    }

    /**
     * Reads a 64 bit long.
     *
     * @return the read 64 bit long.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public long readLong() throws IOException {
        return bin.readLong();
    }

    /**
     * Reads a 32 bit float.
     *
     * @return the 32 bit float read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public float readFloat() throws IOException {
        return bin.readFloat();
    }

    /**
     * Reads a 64 bit double.
     *
     * @return the 64 bit double read.
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public double readDouble() throws IOException {
        return bin.readDouble();
    }

    /**
     * Reads bytes, blocking until all bytes are read.
     *
     * @param buf the buffer into which the data is read
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public void readFully(byte[] buf) throws IOException {
        bin.readFully(buf, 0, buf.length, false);
    }

    /**
     * Reads bytes, blocking until all bytes are read.
     *
     * @param buf the buffer into which the data is read
     * @param off the start offset of the data
     * @param len the maximum number of bytes to read
     * @throws EOFException If end of file is reached.
     * @throws IOException  If other I/O error has occurred.
     */
    public void readFully(byte[] buf, int off, int len) throws IOException {
        int endoff = off + len;
        if (off < 0 || len < 0 || endoff > buf.length || endoff < 0) {
            throw new IndexOutOfBoundsException();
        }
        bin.readFully(buf, off, len, false);
    }

    /**
     * Skips bytes.
     *
     * @param len the number of bytes to be skipped
     * @return the actual number of bytes skipped.
     * @throws IOException If an I/O error has occurred.
     */
    public int skipBytes(int len) throws IOException {
        return bin.skipBytes(len);
    }

    /**
     * Reads in a line that has been terminated by a \n, \r, \r\n or EOF.
     *
     * @return a String copy of the line.
     * @throws IOException if there are I/O errors while reading from the
     *                     underlying <code>InputStream</code>
     * @deprecated This method does not properly convert bytes to characters.
     * see DataInputStream for the details and alternatives.
     */
    @Deprecated
    public String readLine() throws IOException {
        return String.valueOf(bin[i++]);
    }

    /**
     * Reads a String in
     * <a href="DataInput.html#modified-utf-8">modified UTF-8</a>
     * format.
     *
     * @return the String.
     * @throws IOException            if there are I/O errors while reading from the
     *                                underlying <code>InputStream</code>
     * @throws UTFDataFormatException if read bytes do not represent a valid
     *                                modified UTF-8 encoding of a string
     */
    public String readUTF() throws IOException {
        return bin.readUTF();
    }

    /**
     * Prioritized list of callbacks to be performed once object graph has been
     * completely deserialized.
     */
    private static class ValidationList {

        private static class Callback {
            final ObjectInputValidation obj;
            final int priority;
            Callback next;


            Callback(ObjectInputValidation obj, int priority, Callback next) {
                this.obj = obj;
                this.priority = priority;
                this.next = next;
                this.acc = acc;
            }
        }

        /**
         * linked list of callbacks
         */
        private Callback list;

        /**
         * Creates new (empty) ValidationList.
         */
        ValidationList() {
        }

        /**
         * Registers callback.  Throws InvalidObjectException if callback
         * object is null.
         */
        void register(ObjectInputValidation obj, int priority) throws InvalidObjectException {
            if (obj == null) {
                throw new InvalidObjectException("null callback");
            }

            Callback prev = null, cur = list;
            while (cur != null && priority < cur.priority) {
                prev = cur;
                cur = cur.next;
            }
            AccessControlContext acc = AccessController.getContext();
            if (prev != null) {
                prev.next = new Callback(obj, priority, cur, acc);
            } else {
                list = new Callback(obj, priority, list, acc);
            }
        }

        /**
         * Invokes all registered callbacks and clears the callback list.
         * Callbacks with higher priorities are called first; those with equal
         * priorities may be called in any order.  If any of the callbacks
         * throws an InvalidObjectException, the callback process is terminated
         * and the exception propagated upwards.
         */
        void doCallbacks() throws InvalidObjectException {
            while (list != null) {
                list.obj.validateObject();
                list = list.next;
            }
        }

        /**
         * Resets the callback list to its initial (empty) state.
         */
        public void clear() {
            list = null;
        }
    }






}
